
////
This file is generated! See etc/fields.yml and scripts/generate_field_docs.py
////

[[exported-fields]]
== Exported Fields

This document describes the fields that are exported by App-Logs. They are
grouped in the following categories:

* <<exported-fields-ctx>>
* <<exported-fields-app-logs>>

=== Summary
This is a specification of the "app-logs beat" message type that we use to store
"application logs" written via a proper logging infrastructure implementation.

NOTE: For Java applications running on CF, this is our logging support library, see
https://github.com/SAP/perfx/cf-java-logging-support

Field names follow the convention that we're not using camel case names, but
rather use "_" as a delimiter between parts.

For any field that actually represents a measure (or metric for that matter)
the name includes a descriptive suffix mnemonic that helps identifying the unit,
e.g.:

  * "_ms" -> milliseconds
  * "_b"  -> bytes
  * "_p"  -> percent
  * "_at" -> date with time
  * "_ts" -> timestamp

[[exported-fields-ctx]]
=== Context Fields

This group contains context information for the given application log message
such that analytics can slice and dice information based on these criteria.



==== written_at

type: date

required: True

The date when this log message was written.


==== written_ts

type: long

example: 1456820553816849408

required: True

The timestamp in nano-second precision when this request metric message was written.


==== correlation_id

type: string

example: db2d002e-2702-41ec-66f5-c002a80a3d3f

required: True

Should provide a unique identifier that can be used to correlate multiple
log messages into a logical unit (aka "business transaction")..

Currently, we use a UUID for that matter, but future versions may use
SAP passport for this.

"-" indicates that no proper value could be provided.

NOTE: As these type of messages can be written at any time and outside
a "request context" it may happen that this correlation id does not
match with any other. Logging implementations may provide a way to
inherit correlation ids from request processing layers further up in
the processing stack. If so, that id should be used.


==== component_id

type: string

example: 9e6f3ecf-def0-4baf-8fac-9339e61d5645

required: True

Uniquely identifies the software component that has processed the current
request. It may either be a "service" or an "application" that can be deployed to
a container or VM, but it may not yet fully identify the actual "running instance" of
that "component".

NOTE: For applications in CF, this is the "application_id", but we may have more than one
instance of that running.


==== component_name

type: string

example: my-fancy-component

required: False

A human-friendly name representing the software component.

NOTE: Most likely NOT unique!


==== component_type

type: string

example: application

required: True

Specifies the type of the sofware component that processed the current
request.

Either "application" or "service"


==== component_instance

type: string

example: 7

required: True

CF allows us to scale out horizontally by running several instances of the
same "component" (see above) in one container, this is identifying the instance.
Defaults to "0".


==== container_id

type: string

example: ???

format: ???

required: False

Will allow us to identify the "box" or "container" onto which the component
instance(s) were deployed.

NOTE: If security/privacy is not an issue, an IP address would be ok.

NOTE: CF sets an environment variable "INSTANCE_IP" that is currently used
for that purpose


==== organization_id

type: string

example: 280437b3-dd8b-40b1-bbab-1f05a44345f8

required: True

Uniquley identifies the CF organization to which the component belongs which
emitted this message.

"-" indicates that no proper value could be provided.


==== organization_name

type: string

example: acme

required: True

A human-friendly name representing the CF organization.

NOTE: Most likely NOT unique!

"-" indicates that no proper value could be provided.


==== space_id

type: string

example: 280437b3-dd8b-40b1-bbab-1f05a44345f8

required: True

Uniquely identifies the CF space to which the component belongs which emitted this message.

"-" indicates that no proper value could be provided.


==== space_name

type: string

example: test

required: True

A human-friendly name representing the CF space.

NOTE: Most likely NOT unique!


==== layer

type: string

example: [JAVA:BusinessLogicController]

required: True

The execution layer in the overall setup that emitted the message.


==== type

type: string

required: True

To make the message self-contained this is the type tag.
As we're talking about log messages, it's always "app-logs".


[[exported-fields-app-logs]]
=== Application log message fields Fields

The individual fields of a log message. Should be familiar to anyone who
ever used a logging library in Java...



==== logger

type: string

example: com.sap.demo.shine.OrderController

required: True

The actual entity that wrote the log message.

NOTE: In Java, this is the name that was passed to the LoggerFactory
when instantiating a Logger.


==== thread

type: string

example: http-nio-4655

required: False

Identifies the execution thread in which this log message has been written.

"-" indicates that no proper value could be provided.


==== level

type: string

example: INFO

required: True

The log "level" indicating the severity of the log message.


==== msg

type: string

example: This is a log messasge

required: True

The actual message string passed to the logger.


==== stacktrace

type: string

required: False

Stacktrace information in case the message is reporting an exception.

NOTE: This MUST NOT contain NEWLINE or TAB characters!


==== categories

type: string

required: False

A list of names to further categorize this log message.


=== custom_fields Fields

A JSON object representing the custom arguments passed to the logging
framework.

NOTE: In Java, arguments have to be of type CustomField.

NOTE: As this is "custom" there are no predefined fields here!


